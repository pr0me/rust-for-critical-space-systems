/* automatically generated by rust-bindgen 0.69.1 */
#![no_std]
#![allow(unused)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]

pub const CSP_ERR_NONE: u32 = 0;
pub const CSP_ERR_NOMEM: i32 = -1;
pub const CSP_ERR_INVAL: i32 = -2;
pub const CSP_ERR_TIMEDOUT: i32 = -3;
pub const CSP_ERR_USED: i32 = -4;
pub const CSP_ERR_NOTSUP: i32 = -5;
pub const CSP_ERR_BUSY: i32 = -6;
pub const CSP_ERR_ALREADY: i32 = -7;
pub const CSP_ERR_RESET: i32 = -8;
pub const CSP_ERR_NOBUFS: i32 = -9;
pub const CSP_ERR_TX: i32 = -10;
pub const CSP_ERR_DRIVER: i32 = -11;
pub const CSP_ERR_AGAIN: i32 = -12;
pub const CSP_ERR_NOSYS: i32 = -38;
pub const CSP_ERR_HMAC: i32 = -100;
pub const CSP_ERR_CRC32: i32 = -102;
pub const CSP_ERR_SFP: i32 = -103;
pub const CSP_POSIX: u32 = 1;
pub const CSP_ZEPHYR: u32 = 0;
pub const CSP_HAVE_STDIO: u32 = 1;
pub const CSP_ENABLE_CSP_PRINT: u32 = 1;
pub const CSP_PRINT_STDIO: u32 = 1;
pub const CSP_QFIFO_LEN: u32 = 15;
pub const CSP_PORT_MAX_BIND: u32 = 16;
pub const CSP_CONN_RXQUEUE_LEN: u32 = 16;
pub const CSP_CONN_MAX: u32 = 8;
pub const CSP_BUFFER_SIZE: u32 = 256;
pub const CSP_BUFFER_COUNT: u32 = 15;
pub const CSP_RDP_MAX_WINDOW: u32 = 5;
pub const CSP_RTABLE_SIZE: u32 = 10;
pub const CSP_USE_RDP: u32 = 1;
pub const CSP_USE_HMAC: u32 = 1;
pub const CSP_USE_PROMISC: u32 = 1;
pub const CSP_USE_DEDUP: u32 = 1;
pub const CSP_USE_RTABLE: u32 = 0;
pub const CSP_HAVE_LIBSOCKETCAN: u32 = 1;
pub const CSP_HAVE_LIBZMQ: u32 = 1;
pub const _INTTYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const CSP_DBG_ERR_CORRUPT_BUFFER: u32 = 1;
pub const CSP_DBG_ERR_MTU_EXCEEDED: u32 = 2;
pub const CSP_DBG_ERR_ALREADY_FREE: u32 = 3;
pub const CSP_DBG_ERR_REFCOUNT: u32 = 4;
pub const CSP_DBG_ERR_INVALID_RTABLE_ENTRY: u32 = 6;
pub const CSP_DBG_ERR_UNSUPPORTED: u32 = 7;
pub const CSP_DBG_ERR_INVALID_BIND_PORT: u32 = 8;
pub const CSP_DBG_ERR_PORT_ALREADY_IN_USE: u32 = 9;
pub const CSP_DBG_ERR_ALREADY_CLOSED: u32 = 10;
pub const CSP_DBG_ERR_INVALID_POINTER: u32 = 11;
pub const CSP_DBG_ERR_CLOCK_SET_FAIL: u32 = 12;
pub const CSP_DBG_CAN_ERR_FRAME_LOST: u32 = 1;
pub const CSP_DBG_CAN_ERR_RX_OVF: u32 = 2;
pub const CSP_DBG_CAN_ERR_RX_OUT: u32 = 3;
pub const CSP_DBG_CAN_ERR_SHORT_BEGIN: u32 = 4;
pub const CSP_DBG_CAN_ERR_INCOMPLETE: u32 = 5;
pub const CSP_DBG_CAN_ERR_UNKNOWN: u32 = 6;
pub const CSP_DBG_ETH_ERR_FRAME_LOST: u32 = 1;
pub const CSP_DBG_ETH_ERR_RX_OVF: u32 = 2;
pub const CSP_DBG_ETH_ERR_RX_OUT: u32 = 3;
pub const CSP_DBG_ETH_ERR_SHORT_BEGIN: u32 = 4;
pub const CSP_DBG_ETH_ERR_INCOMPLETE: u32 = 5;
pub const CSP_DBG_ETH_ERR_UNKNOWN: u32 = 6;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const CSP_QUEUE_OK: u32 = 0;
pub const CSP_QUEUE_ERROR: i32 = -1;
pub const CSP_ANY: u32 = 255;
pub const CSP_FRES1: u32 = 128;
pub const CSP_FRES2: u32 = 64;
pub const CSP_FRES3: u32 = 32;
pub const CSP_FFRAG: u32 = 16;
pub const CSP_FHMAC: u32 = 8;
pub const CSP_FRDP: u32 = 2;
pub const CSP_FCRC32: u32 = 1;
pub const CSP_SO_NONE: u32 = 0;
pub const CSP_SO_RDPREQ: u32 = 1;
pub const CSP_SO_RDPPROHIB: u32 = 2;
pub const CSP_SO_HMACREQ: u32 = 4;
pub const CSP_SO_HMACPROHIB: u32 = 8;
pub const CSP_SO_CRC32REQ: u32 = 64;
pub const CSP_SO_CRC32PROHIB: u32 = 128;
pub const CSP_SO_CONN_LESS: u32 = 256;
pub const CSP_SO_SAME: u32 = 32768;
pub const CSP_O_NONE: u32 = 0;
pub const CSP_O_RDP: u32 = 1;
pub const CSP_O_NORDP: u32 = 2;
pub const CSP_O_HMAC: u32 = 4;
pub const CSP_O_NOHMAC: u32 = 8;
pub const CSP_O_CRC32: u32 = 64;
pub const CSP_O_NOCRC32: u32 = 128;
pub const CSP_O_SAME: u32 = 32768;
pub const CSP_PACKET_PADDING_BYTES: u32 = 8;
pub const CSP_RDP_HEADER_SIZE: u32 = 5;
pub const CSP_HOSTNAME_LEN: u32 = 20;
pub const CSP_MODEL_LEN: u32 = 30;
pub const CSP_REBOOT_MAGIC: u32 = 2147975175;
pub const CSP_REBOOT_SHUTDOWN_MAGIC: u32 = 3521467034;
pub const CSP_IFLIST_NAME_MAX: u32 = 10;
pub const CSP_NO_VIA_ADDRESS: u32 = 65535;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const CSP_MAX_TIMEOUT: u32 = 4294967295;
pub const CSP_MAX_DELAY: u32 = 4294967295;
pub const CSP_INFINITY: u32 = 4294967295;
pub const CFP_HOST_SIZE: u32 = 5;
pub const CFP_TYPE_SIZE: u32 = 1;
pub const CFP_REMAIN_SIZE: u32 = 8;
pub const CFP_ID_SIZE: u32 = 10;
pub const CFP2_PRIO_MASK: u32 = 3;
pub const CFP2_PRIO_OFFSET: u32 = 27;
pub const CFP2_DST_SIZE: u32 = 14;
pub const CFP2_DST_MASK: u32 = 16383;
pub const CFP2_DST_OFFSET: u32 = 13;
pub const CFP2_SENDER_SIZE: u32 = 6;
pub const CFP2_SENDER_MASK: u32 = 63;
pub const CFP2_SENDER_OFFSET: u32 = 7;
pub const CFP2_SC_MASK: u32 = 3;
pub const CFP2_SC_OFFSET: u32 = 5;
pub const CFP2_FC_MASK: u32 = 7;
pub const CFP2_FC_OFFSET: u32 = 2;
pub const CFP2_BEGIN_MASK: u32 = 1;
pub const CFP2_BEGIN_OFFSET: u32 = 1;
pub const CFP2_END_MASK: u32 = 1;
pub const CFP2_END_OFFSET: u32 = 0;
pub const CFP2_SRC_SIZE: u32 = 14;
pub const CFP2_SRC_MASK: u32 = 16383;
pub const CFP2_SRC_OFFSET: u32 = 18;
pub const CFP2_DPORT_MASK: u32 = 63;
pub const CFP2_DPORT_OFFSET: u32 = 12;
pub const CFP2_SPORT_MASK: u32 = 63;
pub const CFP2_SPORT_OFFSET: u32 = 6;
pub const CFP2_FLAGS_MASK: u32 = 63;
pub const CFP2_FLAGS_OFFSET: u32 = 0;
pub const CFP2_ID_CONN_MASK: u32 = 536870880;
pub const CSP_IF_CAN_DEFAULT_NAME: &[u8; 4] = b"CAN\0";
pub type __u_char = ::core::ffi::c_uchar;
pub type __u_short = ::core::ffi::c_ushort;
pub type __u_int = ::core::ffi::c_uint;
pub type __u_long = ::core::ffi::c_ulong;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_long;
pub type __uint64_t = ::core::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::core::ffi::c_long;
pub type __u_quad_t = ::core::ffi::c_ulong;
pub type __intmax_t = ::core::ffi::c_long;
pub type __uintmax_t = ::core::ffi::c_ulong;
pub type __dev_t = ::core::ffi::c_ulong;
pub type __uid_t = ::core::ffi::c_uint;
pub type __gid_t = ::core::ffi::c_uint;
pub type __ino_t = ::core::ffi::c_ulong;
pub type __ino64_t = ::core::ffi::c_ulong;
pub type __mode_t = ::core::ffi::c_uint;
pub type __nlink_t = ::core::ffi::c_ulong;
pub type __off_t = ::core::ffi::c_long;
pub type __off64_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::core::ffi::c_int; 2usize],
}
pub type __clock_t = ::core::ffi::c_long;
pub type __rlim_t = ::core::ffi::c_ulong;
pub type __rlim64_t = ::core::ffi::c_ulong;
pub type __id_t = ::core::ffi::c_uint;
pub type __time_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_uint;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __suseconds64_t = ::core::ffi::c_long;
pub type __daddr_t = ::core::ffi::c_int;
pub type __key_t = ::core::ffi::c_int;
pub type __clockid_t = ::core::ffi::c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = ::core::ffi::c_long;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blkcnt64_t = ::core::ffi::c_long;
pub type __fsblkcnt_t = ::core::ffi::c_ulong;
pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
pub type __fsfilcnt_t = ::core::ffi::c_ulong;
pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
pub type __fsword_t = ::core::ffi::c_long;
pub type __ssize_t = ::core::ffi::c_long;
pub type __syscall_slong_t = ::core::ffi::c_long;
pub type __syscall_ulong_t = ::core::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::core::ffi::c_char;
pub type __intptr_t = ::core::ffi::c_long;
pub type __socklen_t = ::core::ffi::c_uint;
pub type __sig_atomic_t = ::core::ffi::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type int_fast16_t = ::core::ffi::c_long;
pub type int_fast32_t = ::core::ffi::c_long;
pub type int_fast64_t = ::core::ffi::c_long;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type uint_fast16_t = ::core::ffi::c_ulong;
pub type uint_fast32_t = ::core::ffi::c_ulong;
pub type uint_fast64_t = ::core::ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::core::ffi::c_long,
    pub rem: ::core::ffi::c_long,
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::core::ffi::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::core::ffi::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub static mut csp_dbg_buffer_out: u8;
}
extern "C" {
    pub static mut csp_dbg_conn_out: u8;
}
extern "C" {
    pub static mut csp_dbg_conn_ovf: u8;
}
extern "C" {
    pub static mut csp_dbg_conn_noroute: u8;
}
extern "C" {
    pub static mut csp_dbg_inval_reply: u8;
}
extern "C" {
    pub static mut csp_dbg_errno: u8;
}
extern "C" {
    pub static mut csp_dbg_can_errno: u8;
}
extern "C" {
    pub static mut csp_dbg_eth_errno: u8;
}
extern "C" {
    pub static mut csp_dbg_rdp_print: u8;
}
extern "C" {
    pub static mut csp_dbg_packet_print: u8;
}
extern "C" {
    pub fn csp_print_func(fmt: *const ::core::ffi::c_char, ...);
}
pub type wchar_t = ::core::ffi::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::core::ffi::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub type csp_queue_handle_t = *mut ::core::ffi::c_void;
pub type csp_static_queue_t = *mut ::core::ffi::c_void;
extern "C" {
    pub fn csp_queue_create_static(
        length: ::core::ffi::c_int,
        item_size: usize,
        buffer: *mut ::core::ffi::c_char,
        queue: *mut csp_static_queue_t,
    ) -> csp_queue_handle_t;
}
extern "C" {
    pub fn csp_queue_enqueue(
        handle: csp_queue_handle_t,
        value: *const ::core::ffi::c_void,
        timeout: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_queue_enqueue_isr(
        handle: csp_queue_handle_t,
        value: *const ::core::ffi::c_void,
        pxTaskWoken: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_queue_dequeue(
        handle: csp_queue_handle_t,
        buf: *mut ::core::ffi::c_void,
        timeout: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_queue_dequeue_isr(
        handle: csp_queue_handle_t,
        buf: *mut ::core::ffi::c_void,
        pxTaskWoken: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_queue_size(handle: csp_queue_handle_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_queue_size_isr(handle: csp_queue_handle_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_queue_free(handle: csp_queue_handle_t) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct csp_timestamp_t {
    pub tv_sec: u32,
    pub tv_nsec: u32,
}
pub const csp_service_port_t_CSP_CMP: csp_service_port_t = 0;
pub const csp_service_port_t_CSP_PING: csp_service_port_t = 1;
pub const csp_service_port_t_CSP_PS: csp_service_port_t = 2;
pub const csp_service_port_t_CSP_MEMFREE: csp_service_port_t = 3;
pub const csp_service_port_t_CSP_REBOOT: csp_service_port_t = 4;
pub const csp_service_port_t_CSP_BUF_FREE: csp_service_port_t = 5;
pub const csp_service_port_t_CSP_UPTIME: csp_service_port_t = 6;
pub type csp_service_port_t = ::core::ffi::c_uint;
pub const csp_prio_t_CSP_PRIO_CRITICAL: csp_prio_t = 0;
pub const csp_prio_t_CSP_PRIO_HIGH: csp_prio_t = 1;
pub const csp_prio_t_CSP_PRIO_NORM: csp_prio_t = 2;
pub const csp_prio_t_CSP_PRIO_LOW: csp_prio_t = 3;
pub type csp_prio_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __packed {
    pub pri: u8,
    pub flags: u8,
    pub src: u16,
    pub dst: u16,
    pub dport: u8,
    pub sport: u8,
}
pub type csp_id_t = __packed;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct csp_packet_s {
    pub __bindgen_anon_1: csp_packet_s__bindgen_ty_1,
    pub length: u16,
    pub id: csp_id_t,
    pub next: *mut csp_packet_s,
    pub header: [u8; 8usize],
    pub __bindgen_anon_2: csp_packet_s__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union csp_packet_s__bindgen_ty_1 {
    pub __bindgen_anon_1: csp_packet_s__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: csp_packet_s__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct csp_packet_s__bindgen_ty_1__bindgen_ty_1 {
    pub rdp_quarantine: u32,
    pub timestamp_tx: u32,
    pub timestamp_rx: u32,
    pub conn: *mut csp_conn_s,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct csp_packet_s__bindgen_ty_1__bindgen_ty_2 {
    pub rx_count: u16,
    pub remain: u16,
    pub cfpid: u32,
    pub last_used: u32,
    pub frame_begin: *mut u8,
    pub frame_length: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union csp_packet_s__bindgen_ty_2 {
    pub data: [u8; 256usize],
    pub data16: [u16; 128usize],
    pub data32: [u32; 64usize],
}
pub type csp_packet_t = csp_packet_s;
pub type csp_iface_t = csp_iface_s;
pub type csp_callback_t = ::core::option::Option<unsafe extern "C" fn(packet: *mut csp_packet_t)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct csp_socket_s {
    pub rx_queue: csp_queue_handle_t,
    pub rx_queue_static: csp_static_queue_t,
    pub rx_queue_static_data: [::core::ffi::c_char; 128usize],
    pub opts: u32,
}
pub type csp_socket_t = csp_socket_s;
pub type csp_conn_t = csp_conn_s;
pub type csp_memptr_t = *mut ::core::ffi::c_void;
pub type csp_const_memptr_t = *const ::core::ffi::c_void;
pub type csp_memcpy_fnc_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: csp_memptr_t, arg2: csp_const_memptr_t, arg3: usize) -> csp_memptr_t,
>;
extern "C" {
    pub fn csp_buffer_get(unused: usize) -> *mut csp_packet_t;
}
extern "C" {
    pub fn csp_buffer_get_isr(unused: usize) -> *mut csp_packet_t;
}
extern "C" {
    pub fn csp_buffer_free(buffer: *mut ::core::ffi::c_void);
}
extern "C" {
    pub fn csp_buffer_free_isr(buffer: *mut ::core::ffi::c_void);
}
extern "C" {
    pub fn csp_buffer_clone(buffer: *mut ::core::ffi::c_void) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn csp_buffer_remaining() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_buffer_init();
}
extern "C" {
    pub fn csp_buffer_data_size() -> usize;
}
extern "C" {
    pub fn csp_buffer_refc_inc(buffer: *mut ::core::ffi::c_void);
}
pub type nexthop_t = ::core::option::Option<
    unsafe extern "C" fn(
        iface: *mut csp_iface_t,
        via: u16,
        packet: *mut csp_packet_t,
        from_me: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct csp_iface_s {
    pub addr: u16,
    pub netmask: u16,
    pub name: *const ::core::ffi::c_char,
    pub interface_data: *mut ::core::ffi::c_void,
    pub driver_data: *mut ::core::ffi::c_void,
    pub nexthop: nexthop_t,
    pub is_default: u8,
    pub tx: u32,
    pub rx: u32,
    pub tx_error: u32,
    pub rx_error: u32,
    pub drop: u32,
    pub autherr: u32,
    pub frame: u32,
    pub txbytes: u32,
    pub rxbytes: u32,
    pub irq: u32,
    pub next: *mut csp_iface_s,
}
extern "C" {
    pub fn csp_qfifo_write(
        packet: *mut csp_packet_t,
        iface: *mut csp_iface_t,
        pxTaskWoken: *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn csp_iflist_add(iface: *mut csp_iface_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_iflist_remove(ifc: *mut csp_iface_t);
}
extern "C" {
    pub fn csp_iflist_get_by_name(name: *const ::core::ffi::c_char) -> *mut csp_iface_t;
}
extern "C" {
    pub fn csp_iflist_get_by_addr(addr: u16) -> *mut csp_iface_t;
}
extern "C" {
    pub fn csp_iflist_get_by_subnet(addr: u16, from: *mut csp_iface_t) -> *mut csp_iface_t;
}
extern "C" {
    pub fn csp_iflist_get_by_isdfl(ifc: *mut csp_iface_t) -> *mut csp_iface_t;
}
extern "C" {
    pub fn csp_iflist_get_by_index(idx: ::core::ffi::c_int) -> *mut csp_iface_t;
}
extern "C" {
    pub fn csp_iflist_is_within_subnet(addr: u16, ifc: *mut csp_iface_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_iflist_get() -> *mut csp_iface_t;
}
extern "C" {
    pub fn csp_bytesize(
        bytes: ::core::ffi::c_ulong,
        postfix: *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn csp_iflist_check_dfl();
}
extern "C" {
    pub fn csp_iflist_print();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct csp_route_s {
    pub address: u16,
    pub netmask: u16,
    pub via: u16,
    pub iface: *mut csp_iface_t,
}
pub type csp_route_t = csp_route_s;
extern "C" {
    pub fn csp_rtable_search_backward(start_route: *mut csp_route_t) -> *mut csp_route_t;
}
extern "C" {
    pub fn csp_rtable_find_route(dest_address: u16) -> *mut csp_route_t;
}
extern "C" {
    pub fn csp_rtable_set(
        dest_address: u16,
        netmask: ::core::ffi::c_int,
        ifc: *mut csp_iface_t,
        via: u16,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_rtable_save(
        buffer: *mut ::core::ffi::c_char,
        buffer_size: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_rtable_load(rtable: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_rtable_check(rtable: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_rtable_clear();
}
extern "C" {
    pub fn csp_rtable_free();
}
pub type csp_rtable_iterator_t = ::core::option::Option<
    unsafe extern "C" fn(ctx: *mut ::core::ffi::c_void, route: *mut csp_route_t) -> bool,
>;
extern "C" {
    pub fn csp_rtable_iterate(iter: csp_rtable_iterator_t, ctx: *mut ::core::ffi::c_void);
}
extern "C" {
    pub fn csp_rtable_print();
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __c: ::core::ffi::c_int,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::core::ffi::c_void,
        __c: ::core::ffi::c_int,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::core::ffi::c_void,
        __s2: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::core::ffi::c_void,
        __s2: *const ::core::ffi::c_void,
        __n: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::core::ffi::c_void,
        __c: ::core::ffi::c_int,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::core::ffi::c_ushort,
    pub __ctype_tolower: *const ::core::ffi::c_int,
    pub __ctype_toupper: *const ::core::ffi::c_int,
    pub __names: [*const ::core::ffi::c_char; 13usize],
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __l: locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::core::ffi::c_char,
        __c: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::core::ffi::c_char,
        __c: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::core::ffi::c_char,
        __reject: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::core::ffi::c_char,
        __accept: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::core::ffi::c_char,
        __accept: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::core::ffi::c_char,
        __needle: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::core::ffi::c_char,
        __delim: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::core::ffi::c_char,
        __delim: *const ::core::ffi::c_char,
        __save_ptr: *mut *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::core::ffi::c_char,
        __delim: *const ::core::ffi::c_char,
        __save_ptr: *mut *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::core::ffi::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __buflen: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strerror_l(__errnum: ::core::ffi::c_int, __l: locale_t) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::core::ffi::c_void,
        __s2: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn bcopy(__src: *const ::core::ffi::c_void, __dest: *mut ::core::ffi::c_void, __n: usize);
}
extern "C" {
    pub fn bzero(__s: *mut ::core::ffi::c_void, __n: ::core::ffi::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::core::ffi::c_char,
        __c: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::core::ffi::c_char,
        __c: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn ffs(__i: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::core::ffi::c_long) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::core::ffi::c_longlong) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __loc: locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::core::ffi::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::core::ffi::c_char,
        __delim: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: usize,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn csp_sfp_send_own_memcpy(
        conn: *mut csp_conn_t,
        data: *const ::core::ffi::c_void,
        datasize: ::core::ffi::c_uint,
        mtu: ::core::ffi::c_uint,
        timeout: u32,
        memcpyfcn: csp_memcpy_fnc_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_sfp_recv_fp(
        conn: *mut csp_conn_t,
        dataout: *mut *mut ::core::ffi::c_void,
        datasize: *mut ::core::ffi::c_int,
        timeout: u32,
        first_packet: *mut csp_packet_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_promisc_enable(queue_size: ::core::ffi::c_uint) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_promisc_disable();
}
extern "C" {
    pub fn csp_promisc_read(timeout: u32) -> *mut csp_packet_t;
}
pub const csp_dedup_types_CSP_DEDUP_OFF: csp_dedup_types = 0;
pub const csp_dedup_types_CSP_DEDUP_FWD: csp_dedup_types = 1;
pub const csp_dedup_types_CSP_DEDUP_INCOMING: csp_dedup_types = 2;
pub const csp_dedup_types_CSP_DEDUP_ALL: csp_dedup_types = 3;
pub type csp_dedup_types = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct csp_conf_s {
    pub version: u8,
    pub hostname: *const ::core::ffi::c_char,
    pub model: *const ::core::ffi::c_char,
    pub revision: *const ::core::ffi::c_char,
    pub conn_dfl_so: u32,
    pub dedup: u8,
}
pub type csp_conf_t = csp_conf_s;
extern "C" {
    pub static mut csp_conf: csp_conf_t;
}
extern "C" {
    pub fn csp_init();
}
extern "C" {
    pub fn csp_free_resources();
}
extern "C" {
    pub fn csp_get_conf() -> *const csp_conf_t;
}
extern "C" {
    pub fn csp_id_copy(target: *mut csp_id_t, source: *mut csp_id_t);
}
extern "C" {
    pub fn csp_accept(socket: *mut csp_socket_t, timeout: u32) -> *mut csp_conn_t;
}
extern "C" {
    pub fn csp_read(conn: *mut csp_conn_t, timeout: u32) -> *mut csp_packet_t;
}
extern "C" {
    pub fn csp_send(conn: *mut csp_conn_t, packet: *mut csp_packet_t);
}
extern "C" {
    pub fn csp_send_prio(prio: u8, conn: *mut csp_conn_t, packet: *mut csp_packet_t);
}
extern "C" {
    pub fn csp_transaction_w_opts(
        prio: u8,
        dst: u16,
        dst_port: u8,
        timeout: u32,
        outbuf: *mut ::core::ffi::c_void,
        outlen: ::core::ffi::c_int,
        inbuf: *mut ::core::ffi::c_void,
        inlen: ::core::ffi::c_int,
        opts: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_transaction_persistent(
        conn: *mut csp_conn_t,
        timeout: u32,
        outbuf: *mut ::core::ffi::c_void,
        outlen: ::core::ffi::c_int,
        inbuf: *mut ::core::ffi::c_void,
        inlen: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_recvfrom(socket: *mut csp_socket_t, timeout: u32) -> *mut csp_packet_t;
}
extern "C" {
    pub fn csp_sendto(
        prio: u8,
        dst: u16,
        dst_port: u8,
        src_port: u8,
        opts: u32,
        packet: *mut csp_packet_t,
    );
}
extern "C" {
    pub fn csp_sendto_reply(request: *const csp_packet_t, reply: *mut csp_packet_t, opts: u32);
}
extern "C" {
    pub fn csp_connect(
        prio: u8,
        dst: u16,
        dst_port: u8,
        timeout: u32,
        opts: u32,
    ) -> *mut csp_conn_t;
}
extern "C" {
    pub fn csp_close(conn: *mut csp_conn_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_socket_close(sock: *mut csp_socket_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_conn_dport(conn: *mut csp_conn_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_conn_sport(conn: *mut csp_conn_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_conn_dst(conn: *mut csp_conn_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_conn_src(conn: *mut csp_conn_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_conn_flags(conn: *mut csp_conn_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_listen(socket: *mut csp_socket_t, backlog: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_bind(socket: *mut csp_socket_t, port: u8) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_bind_callback(callback: csp_callback_t, port: u8) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_route_work() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_bridge_set_interfaces(if_a: *mut csp_iface_t, if_b: *mut csp_iface_t);
}
extern "C" {
    pub fn csp_bridge_work();
}
extern "C" {
    pub fn csp_service_handler(packet: *mut csp_packet_t);
}
extern "C" {
    pub fn csp_ping(
        node: u16,
        timeout: u32,
        size: ::core::ffi::c_uint,
        opts: u8,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_ping_noreply(node: u16);
}
extern "C" {
    pub fn csp_ps(node: u16, timeout: u32);
}
extern "C" {
    pub fn csp_get_memfree(node: u16, timeout: u32, size: *mut u32) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_memfree(node: u16, timeout: u32);
}
extern "C" {
    pub fn csp_get_buf_free(node: u16, timeout: u32, size: *mut u32) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_buf_free(node: u16, timeout: u32);
}
extern "C" {
    pub fn csp_reboot(node: u16);
}
extern "C" {
    pub fn csp_shutdown(node: u16);
}
extern "C" {
    pub fn csp_uptime(node: u16, timeout: u32);
}
extern "C" {
    pub fn csp_get_uptime(node: u16, timeout: u32, uptime: *mut u32) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_rdp_set_opt(
        window_size: ::core::ffi::c_uint,
        conn_timeout_ms: ::core::ffi::c_uint,
        packet_timeout_ms: ::core::ffi::c_uint,
        delayed_acks: ::core::ffi::c_uint,
        ack_timeout: ::core::ffi::c_uint,
        ack_delay_count: ::core::ffi::c_uint,
    );
}
extern "C" {
    pub fn csp_rdp_get_opt(
        window_size: *mut ::core::ffi::c_uint,
        conn_timeout_ms: *mut ::core::ffi::c_uint,
        packet_timeout_ms: *mut ::core::ffi::c_uint,
        delayed_acks: *mut ::core::ffi::c_uint,
        ack_timeout: *mut ::core::ffi::c_uint,
        ack_delay_count: *mut ::core::ffi::c_uint,
    );
}
extern "C" {
    pub fn csp_cmp_set_memcpy(fnc: csp_memcpy_fnc_t);
}
extern "C" {
    pub fn csp_conn_print_table();
}
extern "C" {
    pub fn csp_hex_dump(
        desc: *const ::core::ffi::c_char,
        addr: *mut ::core::ffi::c_void,
        len: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn csp_conn_print_table_str(
        str_buf: *mut ::core::ffi::c_char,
        str_size: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_id1_prepend(packet: *mut csp_packet_t);
}
extern "C" {
    pub fn csp_id1_strip(packet: *mut csp_packet_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_id1_setup_rx(packet: *mut csp_packet_t);
}
extern "C" {
    pub fn csp_id2_prepend(packet: *mut csp_packet_t);
}
extern "C" {
    pub fn csp_id2_strip(packet: *mut csp_packet_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_id2_setup_rx(packet: *mut csp_packet_t);
}
extern "C" {
    pub fn csp_id_prepend(packet: *mut csp_packet_t);
}
extern "C" {
    pub fn csp_id_strip(packet: *mut csp_packet_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_id_setup_rx(packet: *mut csp_packet_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_id_get_host_bits() -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn csp_id_get_max_nodeid() -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn csp_id_get_max_port() -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn csp_id_is_broadcast(addr: u16, iface: *mut csp_iface_t) -> ::core::ffi::c_int;
}
pub type csp_can_driver_tx_t = ::core::option::Option<
    unsafe extern "C" fn(
        driver_data: *mut ::core::ffi::c_void,
        id: u32,
        data: *const u8,
        dlc: u8,
    ) -> ::core::ffi::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct csp_can_interface_data_t {
    pub cfp_packet_counter: u32,
    pub tx_func: csp_can_driver_tx_t,
    pub pbufs: *mut csp_packet_t,
}
extern "C" {
    pub fn csp_can_add_interface(iface: *mut csp_iface_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_can_remove_interface(iface: *mut csp_iface_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_can_tx(
        iface: *mut csp_iface_t,
        via: u16,
        packet: *mut csp_packet_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn csp_can_rx(
        iface: *mut csp_iface_t,
        id: u32,
        data: *const u8,
        dlc: u8,
        pxTaskWoken: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct csp_can_pbuf_element_t {
    pub rx_count: u16,
    pub remain: u16,
    pub cfpid: u32,
    pub last_used: u32,
}
extern "C" {
    pub fn csp_can_pbuf_free(
        ifdata: *mut csp_can_interface_data_t,
        buffer: *mut csp_packet_t,
        buf_free: ::core::ffi::c_int,
        task_woken: *mut ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn csp_can_pbuf_new(
        ifdata: *mut csp_can_interface_data_t,
        id: u32,
        task_woken: *mut ::core::ffi::c_int,
    ) -> *mut csp_packet_t;
}
extern "C" {
    pub fn csp_can_pbuf_find(
        ifdata: *mut csp_can_interface_data_t,
        id: u32,
        mask: u32,
        task_woken: *mut ::core::ffi::c_int,
    ) -> *mut csp_packet_t;
}
extern "C" {
    pub fn csp_can_pbuf_cleanup(
        ifdata: *mut csp_can_interface_data_t,
        task_woken: *mut ::core::ffi::c_int,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct csp_conn_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
